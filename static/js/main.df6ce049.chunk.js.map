{"version":3,"sources":["components/BusinessForm.tsx","components/InferenceContainer.tsx","components/BusinessInfoContainer.tsx","components/Header.tsx","components/Page.tsx","pages/BusinessLookup.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BusinessForm","props","onSubmit","submitButtonText","useState","name","location","query","setQuery","onFormTextChange","event","target","value","Form","Group","Label","Control","type","required","placeholder","onChange","Text","Button","variant","onClick","_","BooleanInferenceContainer","title","inference","insight","confidence","images","evidence","percent","Card","className","Accordion","Toggle","as","Header","eventKey","ProgressBar","now","Collapse","Body","Math","round","length","BusinessInfoContainer","business","servesAlcohol","inferences","Container","Navbar","bg","exact","to","Brand","bsPrefix","Page","children","fluid","GET_BUSINESS_INFO","gql","BusinessLookup","useLazyQuery","getBusinessInfo","loading","data","businessQuery","setBusinessQuery","Row","Col","businessInfoInput","address","variables","Spinner","animation","role","App","basename","process","path","component","LookupBusiness","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df6ce049.chunk.js","sourcesContent":["import { ChangeEvent, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { BusinessQuery } from '../models/Business';\n\ninterface BusinessFormProps {\n\tonSubmit: (query: BusinessQuery) => void;\n\tsubmitButtonText: string;\n}\n\nconst BusinessForm = (props: BusinessFormProps) => {\n\tconst { onSubmit, submitButtonText } = props;\n\n\tconst [query, setQuery] = useState<BusinessQuery>({\n\t\tname: '',\n\t\tlocation: '',\n\t});\n\n\tconst onFormTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tconst { name, value } = event.target;\n\t\tsetQuery({\n\t\t\t...query,\n\t\t\t[name]: value,\n\t\t});\n\t};\n\n\treturn (\n\t\t<Form>\n\t\t\t<Form.Group>\n\t\t\t\t<Form.Label>Business Name</Form.Label>\n\t\t\t\t<Form.Control\n\t\t\t\t\tname=\"name\"\n\t\t\t\t\tvalue={query.name}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Name\"\n\t\t\t\t\tonChange={onFormTextChange}\n\t\t\t\t/>\n\t\t\t</Form.Group>\n\n\t\t\t<Form.Group>\n\t\t\t\t<Form.Label>Business Location</Form.Label>\n\t\t\t\t<Form.Text>\n\t\t\t\t\tThis can be an address, or the name of a place. Please be as specific as possible.\n\t\t\t\t</Form.Text>\n\t\t\t\t<Form.Control\n\t\t\t\t\tname=\"location\"\n\t\t\t\t\tvalue={query.location}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Location\"\n\t\t\t\t\tonChange={onFormTextChange}\n\t\t\t\t/>\n\t\t\t</Form.Group>\n\n\t\t\t<Button variant=\"primary\" type=\"button\" onClick={(_) => onSubmit(query)}>\n\t\t\t\t{submitButtonText}\n\t\t\t</Button>\n\t\t</Form>\n\t);\n};\n\nexport default BusinessForm;\n","import { BooleanInsight as BooleanInference } from '../graphql/generatedTypes';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\ninterface BooleanInferenceContainerProps {\n\ttitle: string;\n\tinference: BooleanInference;\n}\n\nexport const BooleanInferenceContainer = (props: BooleanInferenceContainerProps) => {\n\tconst {\n\t\ttitle,\n\t\tinference: {\n\t\t\tinsight,\n\t\t\tconfidence,\n\t\t\tevidence: { images },\n\t\t},\n\t} = props;\n\tconst percent: number = insight ? confidence * 100 : 0;\n\treturn (\n\t\t<Card className=\"inference mb-3\">\n\t\t\t<Accordion.Toggle as={Card.Header} eventKey={title}>\n\t\t\t\t<div className=\"d-flex flex-row justify-content-center align-items-center\">\n\t\t\t\t\t<h3 className=\"m-0\">{title}</h3>\n\t\t\t\t\t<ProgressBar now={percent} className=\"flex-grow-1 ml-3\" />\n\t\t\t\t</div>\n\t\t\t</Accordion.Toggle>\n\t\t\t<Accordion.Collapse as={Card.Body} eventKey={title} className=\"px-3 pt-3\">\n\t\t\t\t<div>\n\t\t\t\t\t<b>{`${Math.round(percent)}% confidence.`}</b>\n\t\t\t\t\t<p>{images ? `${images.length} pieces of evidence found.` : 'No evidence found.'}</p>\n\t\t\t\t</div>\n\t\t\t</Accordion.Collapse>\n\t\t</Card>\n\t);\n};\n","import Accordion from 'react-bootstrap/Accordion';\nimport Container from 'react-bootstrap/Container';\nimport { Business } from '../models/Business';\nimport { BooleanInferenceContainer } from './InferenceContainer';\n\ninterface BusinessInfoProps {\n\tbusiness: Business;\n}\n\nconst BusinessInfoContainer = (props: BusinessInfoProps) => {\n\tconst {\n\t\tbusiness: {\n\t\t\tname,\n\t\t\tlocation,\n\t\t\tinferences: { servesAlcohol },\n\t\t},\n\t} = props;\n\treturn (\n\t\t<Container>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{location}</p>\n\t\t\t<hr />\n\t\t\t<Accordion>\n\t\t\t\t<BooleanInferenceContainer title=\"Serves alcohol?\" inference={servesAlcohol} />\n\t\t\t\t<BooleanInferenceContainer title=\"Does delivery?\" inference={{\n\t\t\t\t\tinsight: true,\n\t\t\t\t\tconfidence: 0.4198374,\n\t\t\t\t\tevidence: {},\n\t\t\t\t}}/>\n\t\t\t\t<BooleanInferenceContainer title=\"Has bouncer?\" inference={{\n\t\t\t\t\tinsight: true,\n\t\t\t\t\tconfidence: 0.6431532,\n\t\t\t\t\tevidence: {},\n\t\t\t\t}}/>\n\t\t\t\t<BooleanInferenceContainer title=\"Has live entertainment?\" inference={{\n\t\t\t\t\tinsight: true,\n\t\t\t\t\tconfidence: 0.98432,\n\t\t\t\t\tevidence: {},\n\t\t\t\t}}/>\n\t\t\t\t<BooleanInferenceContainer title=\"Has patio?\" inference={{\n\t\t\t\t\tinsight: false,\n\t\t\t\t\tconfidence: 0,\n\t\t\t\t\tevidence: {},\n\t\t\t\t}}/>\n\t\t\t\t<BooleanInferenceContainer title=\"Has deep fat fryer?\" inference={{\n\t\t\t\t\tinsight: false,\n\t\t\t\t\tconfidence: 0.3124,\n\t\t\t\t\tevidence: {},\n\t\t\t\t}}/>\n\t\t\t\t<BooleanInferenceContainer title=\"Has fire extinguisher?\" inference={{\n\t\t\t\t\tinsight: true,\n\t\t\t\t\tconfidence: 0.52861,\n\t\t\t\t\tevidence: {},\n\t\t\t\t}}/>\n\t\t\t</Accordion>\n\t\t</Container>\n\t);\n};\n\nexport default BusinessInfoContainer;\n","import { LinkContainer } from 'react-router-bootstrap';\nimport Navbar from 'react-bootstrap/Navbar';\n\ninterface HeaderProps {\n\ttitle: string;\n}\n\nconst Header = (props: HeaderProps) => {\n\tconst { title } = props;\n\treturn (\n\t\t<Navbar bg=\"dark\" variant=\"dark\">\n\t\t\t<h1>{title}</h1>\n\t\t\t<LinkContainer exact to=\"/\" className=\"ml-auto\">\n\t\t\t\t<Navbar.Brand bsPrefix=\"logo\">businext</Navbar.Brand>\n\t\t\t</LinkContainer>\n\t\t</Navbar>\n\t);\n};\n\nexport default Header;\n","import { ReactNode } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Header from './Header';\n\ninterface PageProps {\n\tchildren: ReactNode;\n\ttitle: string;\n}\n\nconst Page = (props: PageProps) => {\n\tconst { children, title } = props;\n\treturn (\n\t\t<div className=\"fill d-flex flex-column\">\n\t\t\t<Header title={title} />\n\t\t\t<Container fluid className=\"flex-grow-1\">\n\t\t\t\t{children}\n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\nexport default Page;\n","import { gql, useLazyQuery } from '@apollo/client';\nimport { useState } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { RouteComponentProps } from 'react-router-dom';\nimport BusinessForm from '../components/BusinessForm';\nimport BusinessInfoContainer from '../components/BusinessInfoContainer';\nimport { BusinessInferences, QueryGetBusinessInfoArgs } from '../graphql/generatedTypes';\nimport { BusinessQuery } from '../models/Business';\nimport Page from '../components/Page';\n\ntype GetBusinessInfoParams = QueryGetBusinessInfoArgs;\ntype GetBusinessInfoResult = {\n\tgetBusinessInfo: BusinessInferences;\n};\n\nconst GET_BUSINESS_INFO = gql`\n\tquery GetBusinessInfo($businessInfoInput: BusinessInfoInput!) {\n\t\tgetBusinessInfo(businessInfoInput: $businessInfoInput) {\n\t\t\tservesAlcohol {\n\t\t\t\tinsight\n\t\t\t\tconfidence\n\t\t\t\tevidence {\n\t\t\t\t\timages {\n\t\t\t\t\t\tsource {\n\t\t\t\t\t\t\torigin {\n\t\t\t\t\t\t\t\tsource\n\t\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\textractions {\n\t\t\t\t\t\t\t\tassignedLabels {\n\t\t\t\t\t\t\t\t\tconfidence\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t\ttopicality\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdetectedObjects {\n\t\t\t\t\t\t\t\t\tconfidence\n\t\t\t\t\t\t\t\t\tobjectName\n\t\t\t\t\t\t\t\t\tboundingPolygon {\n\t\t\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t\t\ty\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treason\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst BusinessLookup = (props: RouteComponentProps) => {\n\tconst [getBusinessInfo, { loading, data }] = useLazyQuery<GetBusinessInfoResult, GetBusinessInfoParams>(\n\t\tGET_BUSINESS_INFO\n\t);\n\n\tconst [businessQuery, setBusinessQuery] = useState<BusinessQuery>({\n\t\tname: '',\n\t\tlocation: '',\n\t});\n\n\tconst onSubmit = (query: BusinessQuery) => {\n\t\tsetBusinessQuery(query);\n\t\tconst businessInfoInput = {\n\t\t\tname: query.name,\n\t\t\taddress: query.location,\n\t\t};\n\t\tgetBusinessInfo({\n\t\t\tvariables: {\n\t\t\t\tbusinessInfoInput,\n\t\t\t},\n\t\t});\n\t};\n\n\treturn (\n\t\t<Page title=\"Business Lookup\">\n\t\t\t<Row className=\"fill\">\n\t\t\t\t<Col className=\"p-3 col-md-4 sidebar\">\n\t\t\t\t\t<BusinessForm onSubmit={onSubmit} submitButtonText=\"Get Insights\" />\n\t\t\t\t</Col>\n\t\t\t\t<Col className=\"p-3 col-md-8\">\n\t\t\t\t\t{loading && (\n\t\t\t\t\t\t<div className=\"d-flex fill justify-content-center align-items-center\">\n\t\t\t\t\t\t\t<Spinner animation=\"border\" role=\"status\" className=\"loading\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{data && (\n\t\t\t\t\t\t<BusinessInfoContainer\n\t\t\t\t\t\t\tbusiness={{\n\t\t\t\t\t\t\t\tname: businessQuery.name,\n\t\t\t\t\t\t\t\tlocation: businessQuery.location,\n\t\t\t\t\t\t\t\tinferences: data.getBusinessInfo,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Page>\n\t);\n};\n\nexport default BusinessLookup;\n","import { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport LookupBusiness from './pages/BusinessLookup';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<BrowserRouter basename={process.env.PUBLIC_URL}>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/\" component={LookupBusiness} />\n\t\t\t\t</Switch>\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/global.css';\n\nconst client = new ApolloClient({\n\turi: 'http://localhost:4000',\n\tcache: new InMemoryCache(),\n});\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ApolloProvider client={client}>\n\t\t\t<App />\n\t\t</ApolloProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}